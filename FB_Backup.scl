FUNCTION_BLOCK "FB_Backup"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'EconoPak GmbH'
VERSION : 0.1
   VAR_INPUT 
      i_LocalTime {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Aktuelles Datum und Uhrzeit
      i_Name : String := 'Backup';   // Präfix für die Sicherungs Datei
      i_FormatChangeLocked : Bool;   // Format wechseln gesperrt
      i_BtnStartExport : Bool;   // Start des Exportes der Formatdaten
      i_BtnStartImport : Bool;   // Start des Importes der Formatdaten
      i_BtnDeleteAll : Bool;
      i_ImportWeekdayManual : USInt := 1;   // Wochentag von welche eine Sicherungskopie manuell wieder hergestellt werden soll
   END_VAR

   VAR_OUTPUT 
      q_Done : Bool;   // Umkopieren der Daten abgeschlossen
      q_Busy : Bool;   // Umkopieren der Daten in bearbeitung
      q_Error : Bool;   // Beim umkopieren der Daten ist ein Fehler aufgetreten
      q_ReloadData : Bool;   // Importdaten von Format X in Format 0 kopieren
      q_Status : Word;   // Status des Sicherungs vorganges
      q_ErrorID : Word;   // Fehlercode des Sicherungsprozesses
      q_TimestampLastBackup {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Zeitstempel der letzten Sicherungskopie
      q_StatusExportHMI : Int;   // Status des Exportes der Formatdaten
      q_StatusImportHMI : Int;   // Status des Importes der Formatdaten
      q_TimestampHMI {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Zeitstempel für die Sicherungskopie
   END_VAR

   VAR_IN_OUT 
      iq_Data : Variant;
   END_VAR

   VAR 
      stat_Done : Bool;
      stat_Busy : Bool;
      stat_Error : Bool;
      stat_Status : Word;
      stat_ErrorID : Word;
      stat_StartExportOld : Bool;
      stat_StartImportOld : Bool;
      stat_ReloadData : Bool;
      stat_FBStateMachine : Int;
   END_VAR
   VAR RETAIN
      stat_TimestampLastBackup {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;
   END_VAR
   VAR 
      stat_TimestampHMI {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;
      stat_BackupCreated : Array[1..8] of Bool;
   END_VAR
   VAR RETAIN
      stat_BackupExists : Array[1..8] of Bool;
      stat_TimestampBackup {InstructionName := 'DTL'; LibVersion := '1.0'} : Array[1..8] of DTL;
   END_VAR
   VAR 
      stat_StatusExportHMI : Int;
      stat_StatusImportHMI : Int;
      stat_CounterDelete : Int;
      inst_FileWriteC {InstructionName := 'FileWriteC'; LibVersion := '1.0'; S7_SetPoint := 'False'} : FileWriteC;
      inst_FileReadC {InstructionName := 'FileReadC'; LibVersion := '1.0'; S7_SetPoint := 'False'} : FileReadC;
      inst_FileDelete {InstructionName := 'FileDelete'; LibVersion := '1.0'} : FileDelete;
      inst_RTrigDelete {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      stat_WeekdayOld : USInt;
      stat_TriggerExport : Bool;
      stat_TriggerImport : Bool;
      stat_TriggerDelete : Bool;
      stat_DestExport { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..120000] of Byte;
      stat_DestImport { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..120000] of Byte;
      inst_TON_ExportDone {InstructionName := 'TON_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON_TIME;
      inst_TON_ImportDone {InstructionName := 'TON_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON_TIME;
      inst_TP_Reload {InstructionName := 'TP_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TP_TIME;
   END_VAR

   VAR_TEMP 
      temp_Time {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;
      temp_Name : String;
      temp_ImportLocked : Bool;
      temp_StartExport : Bool;
      temp_StartImport : Bool;
      temp_BtnDelete : Bool;
      temp_ImportWeekdayManual : USInt;
      temp_ManualName : String;
      temp_WeekdayName : String;
      temp_ImportName : String;
      temp_DeleteName : String;
      temp_PosExport : DInt;
      temp_PosImport : DInt;
      temp_counter : Int;
      temp_RetVal : Int;
   END_VAR

   VAR CONSTANT 
      FB_STATE_IDLE : Int := 0;
      FB_STATE_EXPORT_WEEKDAY : Int := 10;
      FB_STATE_EXPORT_MANUAL : Int := 20;
      FB_STATE_IMPORT : Int := 30;
      FB_STATE_DELETE : Int := 40;
      FB_STATE_BUSY : Int := 50;
      FB_STATE_DONE : Int := 60;
      FB_STATE_ERROR : Int := 70;
      MO : USInt := 2;
      TU : USInt := 3;
      WE : USInt := 4;
      TH : USInt := 5;
      FR : USInt := 6;
      SA : USInt := 7;
      SU : USInt := 1;
      MANUAL : USInt := 8;
      STATUS_NOCALL : Word := 16#0;
      STATUS_START_PROCESS : Word := 16#7000;
      STATUS_BUSY : Word := 16#7001;
      STATUS_DONE : Word := 16#7002;
      ERROR_FILEWRITEC : Word := 16#8001;
      ERROR_FILEREADC : Word := 16#8002;
   END_VAR


BEGIN
	//===============================================================================================
	// Econo-PAK GmbH
	//-----------------------------------------------------------------------------------------------
	// The FB is doing backups from the Data that available on iq_Data
	//-----------------------------------------------------------------------------------------------
	// Change log table:
	// Version    Date          Expert in charge    Changes applied
	// 01.00.00   21.03.2022    SK                  First release version v1.0
	// 01.00.1    01.10.2022    SK                  Add limiting to temp_ImportWeekdayManual
	// 01.01.00   07.12.2022    SK                  Add Delete function (all backups will be deleted)
	//===============================================================================================
	REGION MAP INPUTS
	    #temp_Time := #i_LocalTime;
	    #temp_Name := #i_Name;
	    #temp_ImportLocked := #i_FormatChangeLocked;
	    #temp_StartExport := #i_BtnStartExport;
	    #temp_StartImport := #i_BtnStartImport;
	    #temp_BtnDelete := #i_BtnDeleteAll;
	    #temp_ImportWeekdayManual := #i_ImportWeekdayManual;
	    #temp_ImportWeekdayManual := LIMIT(MN := 1, IN := #temp_ImportWeekdayManual, MX := 8);
	END_REGION
	
	REGION TRIGGER DELETE
	    #inst_RTrigDelete(CLK := #temp_BtnDelete);
	END_REGION
	    
	REGION STATE MACHINE
	    CASE #stat_FBStateMachine OF
	        #FB_STATE_IDLE:
	            REGION STATE IDLE
	                IF (#temp_Time.WEEKDAY <> #stat_WeekdayOld)
	                    OR (#temp_Time.WEEKDAY = #stat_WeekdayOld
	                    AND NOT #stat_BackupExists[#temp_Time.WEEKDAY])
	                THEN
	                    #stat_FBStateMachine := #FB_STATE_EXPORT_WEEKDAY;
	                    #stat_Status := #STATUS_START_PROCESS;
	                    #stat_Busy := TRUE;
	                END_IF;
	                
	                IF #temp_StartExport AND NOT #stat_StartExportOld THEN
	                    #stat_FBStateMachine := #FB_STATE_EXPORT_MANUAL;
	                    #stat_Status := #STATUS_START_PROCESS;
	                    #stat_Busy := TRUE;
	                END_IF;
	                
	                IF #temp_StartImport AND NOT #stat_StartImportOld AND NOT #temp_ImportLocked AND #stat_BackupExists[#temp_ImportWeekdayManual] THEN
	                    #stat_FBStateMachine := #FB_STATE_IMPORT;
	                    #stat_Status := #STATUS_START_PROCESS;
	                    #stat_Busy := TRUE;
	                END_IF;
	                
	                IF #inst_RTrigDelete.Q AND NOT #temp_StartExport AND NOT #temp_StartImport THEN
	                    #stat_FBStateMachine := #FB_STATE_DELETE;
	                    #stat_Status := #STATUS_START_PROCESS;
	                    #stat_Busy := TRUE;
	                END_IF;
	                
	                #stat_StartExportOld := #temp_StartExport;
	                #stat_StartImportOld := #temp_StartImport;
	                
	                #stat_TriggerExport := FALSE;
	                #stat_TriggerImport := FALSE;
	            END_REGION
	        #FB_STATE_EXPORT_WEEKDAY:
	            REGION STATE_EXPORT_WEEKDAY
	                #temp_WeekdayName := CONCAT(IN1 := 'UserFiles/', IN2 := #temp_Name);
	                CASE #temp_Time.WEEKDAY OF
	                    #MO:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_Mo.txt');
	                    #TU:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_Tu.txt');
	                    #WE:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_We.txt');
	                    #TH:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_Th.txt');
	                    #FR:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_Fr.txt');
	                    #SA:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_Sa.txt');
	                    #SU:
	                        #temp_WeekdayName := CONCAT(IN1 := #temp_WeekdayName, IN2 := '_Su.txt');
	                END_CASE;
	                
	                #temp_PosExport := 0;
	                #temp_RetVal := Serialize(SRC_VARIABLE := #iq_Data, DEST_ARRAY => #stat_DestExport, POS := #temp_PosExport);
	                
	                #inst_FileWriteC.Name := #temp_WeekdayName;
	                
	                #stat_TriggerExport := TRUE;
	                
	                IF #inst_FileWriteC.Done THEN
	                    #stat_WeekdayOld := #temp_Time.WEEKDAY;
	                    #stat_BackupExists[#temp_Time.WEEKDAY] := TRUE;
	                    #stat_TimestampBackup[#temp_Time.WEEKDAY] := #temp_Time;
	                    #stat_TimestampLastBackup := #temp_Time;
	                    #stat_Status := #STATUS_DONE;
	                END_IF;
	                
	                IF #inst_FileWriteC.Error THEN
	                    #stat_FBStateMachine := #FB_STATE_ERROR;
	                END_IF;
	            END_REGION
	        #FB_STATE_EXPORT_MANUAL:
	            REGION STATE_EXPORT_MANUAL
	                #temp_ManualName := CONCAT(IN1 := 'UserFiles/', IN2 := #temp_Name);
	                #temp_ManualName := CONCAT(IN1 := #temp_ManualName, IN2 := '_Manual.txt');
	                
	                #temp_PosExport := 0;
	                #temp_RetVal := Serialize(SRC_VARIABLE := #iq_Data, DEST_ARRAY => #stat_DestExport, POS := #temp_PosExport);
	                
	                #inst_FileWriteC.Name := #temp_ManualName;
	                
	                #stat_TriggerExport := TRUE;
	                
	                IF #inst_FileWriteC.Done THEN
	                    #stat_BackupExists[#MANUAL] := TRUE;
	                    #stat_TimestampBackup[#MANUAL] := #temp_Time;
	                    #stat_TimestampLastBackup := #temp_Time;
	                    #stat_Status := #STATUS_DONE;
	                END_IF;
	                
	                IF #inst_FileWriteC.Error THEN
	                    #stat_FBStateMachine := #FB_STATE_ERROR;
	                END_IF;
	            END_REGION
	        #FB_STATE_IMPORT:
	            REGION STATE_IMPORT
	                #temp_ImportName := CONCAT(IN1 := 'UserFiles/', IN2 := #temp_Name);
	                
	                CASE #temp_ImportWeekdayManual OF
	                    #MO:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Mo.txt');
	                    #TU:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Tu.txt');
	                    #WE:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_We.txt');
	                    #TH:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Th.txt');
	                    #FR:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Fr.txt');
	                    #SA:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Sa.txt');
	                    #SU:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Su.txt');
	                    #MANUAL:
	                        #temp_ImportName := CONCAT(IN1 := #temp_ImportName, IN2 := '_Manual.txt');
	                END_CASE;
	                
	                #inst_FileReadC.Name := #temp_ImportName;
	                
	                #stat_TriggerImport := TRUE;
	                
	                IF #inst_FileReadC.Done
	                THEN
	                    #temp_PosImport := 0;
	                    
	                    #temp_RetVal := Deserialize(SRC_ARRAY := #stat_DestImport, DEST_VARIABLE => #iq_Data, POS := #temp_PosImport);
	                    #stat_Status := #STATUS_DONE;
	                END_IF;
	            END_REGION
	        #FB_STATE_DELETE:
	            REGION STATE_DELETE
	                #temp_DeleteName := CONCAT(IN1 := 'UserFiles/', IN2 := #temp_Name);
	                #stat_CounterDelete := LIMIT(MN := 1, IN := #stat_CounterDelete, MX := 8);
	                
	                CASE #stat_CounterDelete OF
	                    #MO:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Mo.txt');
	                    #TU:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Tu.txt');
	                    #WE:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_We.txt');
	                    #TH:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Th.txt');
	                    #FR:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Fr.txt');
	                    #SA:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Sa.txt');
	                    #SU:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Su.txt');
	                    #MANUAL:
	                        #temp_DeleteName := CONCAT(IN1 := #temp_DeleteName, IN2 := '_Manual.txt');
	                END_CASE;
	                
	                #inst_FileDelete.Name := #temp_DeleteName;
	                
	                #stat_TriggerDelete := TRUE;
	                
	                IF #inst_FileDelete.Done OR #inst_FileDelete.Error THEN
	                    #stat_TriggerDelete := FALSE;
	                    #stat_BackupExists[#stat_CounterDelete] := false;
	                    #stat_CounterDelete += 1;
	                END_IF;
	                
	                IF #stat_CounterDelete > 8 THEN
	                    #stat_CounterDelete := 1;
	                    #stat_FBStateMachine := #FB_STATE_IDLE;
	                END_IF;
	            END_REGION
	        #FB_STATE_BUSY:
	            REGION STATE_BUSY
	                #stat_TriggerExport := FALSE;
	                #stat_TriggerImport := FALSE;
	                #stat_TriggerDelete := FALSE;
	                
	                IF #inst_FileWriteC.Done
	                    OR #inst_FileReadC.Done
	                THEN
	                    #stat_FBStateMachine := #FB_STATE_DONE;
	                END_IF;
	                
	                IF #inst_FileWriteC.Error
	                    OR #inst_FileReadC.Error
	                THEN
	                    #stat_FBStateMachine := #FB_STATE_ERROR;
	                END_IF;
	            END_REGION
	        #FB_STATE_DONE:
	            REGION STATE_DONE
	                #stat_TriggerExport := FALSE;
	                #stat_TriggerImport := FALSE;
	                #stat_TriggerDelete := FALSE;
	                IF #inst_TON_ImportDone.Q OR #inst_TON_ExportDone.Q THEN
	                    #stat_FBStateMachine := #FB_STATE_IDLE;
	                END_IF;
	            END_REGION
	        #FB_STATE_ERROR:
	            REGION STATE_ERROR
	                #stat_TriggerExport := FALSE;
	                #stat_TriggerImport := FALSE;
	                #stat_TriggerDelete := FALSE;
	                #stat_FBStateMachine := #FB_STATE_IDLE;
	            END_REGION
	    END_CASE;
	END_REGION
	
	REGION CALL FUNCTIONS
	    REGION FILEWRITEC
	        #inst_FileWriteC(REQ := #stat_TriggerExport,
	                         Offset := 0,
	                         Length := DINT_TO_UDINT(#temp_PosExport),
	                         Data := #stat_DestExport);
	    END_REGION
	    REGION FILEREADC
	        #inst_FileReadC(REQ := #stat_TriggerImport,
	                        Offset := 0,
	                        Length := 0,
	                        Data := #stat_DestImport);
	    END_REGION
	    REGION FILEDELETE
	        #inst_FileDelete(REQ:=#stat_TriggerDelete);
	    END_REGION
	END_REGION
	
	REGION HMI
	    REGION EXPORT
	        IF #inst_FileWriteC.Busy THEN
	            #stat_StatusExportHMI := 1;
	        ELSIF #inst_FileWriteC.Done THEN
	            #stat_StatusExportHMI := 2;
	        ELSIF #inst_FileWriteC.Error THEN
	            #stat_StatusExportHMI := 3;
	        END_IF;
	        
	        #inst_TON_ExportDone(IN := #stat_StatusExportHMI >= 2,
	                            PT := t#5s);
	        IF #inst_TON_ExportDone.Q THEN
	            #stat_StatusExportHMI := 0;
	        END_IF;
	    END_REGION
	    REGION IMPORT
	        IF #inst_FileReadC.Busy THEN
	            #stat_StatusImportHMI := 1;
	        ELSIF #inst_FileReadC.Done THEN
	            #stat_StatusImportHMI := 2;
	        ELSIF #inst_FileReadC.Error THEN
	            #stat_StatusImportHMI := 3;
	        ELSIF NOT #stat_BackupExists[#temp_ImportWeekdayManual] THEN
	            #stat_StatusImportHMI := 4;
	        ELSIF #stat_BackupExists[#temp_ImportWeekdayManual] AND #stat_StatusImportHMI = 4 THEN
	            #stat_StatusImportHMI := 0;
	        END_IF;
	        
	        #inst_TON_ImportDone(IN := #stat_StatusImportHMI >= 2 AND #stat_StatusImportHMI < 4,
	                            PT := t#5s);
	        IF #inst_TON_ImportDone.Q THEN
	            #stat_StatusImportHMI := 0;
	        END_IF;
	    END_REGION
	    
	    #stat_TimestampHMI := #stat_TimestampBackup[#temp_ImportWeekdayManual];
	END_REGION
	
	REGION RELOAD
	    #inst_TP_Reload(IN := #stat_StatusImportHMI = 2,
	                   PT := t#500ms);
	    
	    #stat_ReloadData := #inst_TP_Reload.Q;
	END_REGION
	
	REGION OUTPUTS
	    IF #stat_Status = #STATUS_DONE AND (#stat_Done = FALSE)THEN
	        #stat_Done := TRUE;
	        #stat_Busy := FALSE;
	        #stat_Error := FALSE;
	        #stat_FBStateMachine := #FB_STATE_DONE;
	    ELSIF (#stat_Status.%X15 = TRUE) AND (#stat_Error = FALSE) THEN
	        #stat_Done := FALSE;
	        #stat_Busy := FALSE;
	        #stat_Error := TRUE;
	        #stat_Status := #STATUS_NOCALL;
	        #stat_FBStateMachine := #FB_STATE_ERROR;
	    ELSIF #stat_FBStateMachine = #FB_STATE_IDLE AND ((#stat_Done = TRUE) OR (#stat_Error = TRUE)) THEN
	        #stat_Done := FALSE;
	        #stat_Busy := FALSE;
	        #stat_Error := FALSE;
	        #stat_Status := #STATUS_NOCALL;
	    END_IF;
	    
	    #q_Done := #stat_Done;
	    #q_Busy := #stat_Busy;
	    #q_Error := #stat_Error;
	    #q_ErrorID := #stat_ErrorID;
	    #q_Status := #stat_Status;
	    #q_TimestampLastBackup := #stat_TimestampLastBackup;
	    #q_StatusExportHMI := #stat_StatusExportHMI;
	    #q_StatusImportHMI := #stat_StatusImportHMI;
	    #q_TimestampHMI := #stat_TimestampHMI;
	    #q_ReloadData := #stat_ReloadData;
	END_REGION
END_FUNCTION_BLOCK

